name: Fv-Apps-Dev
on:
  push:
    branches:
      - dev
jobs:
  inspect_changes:
    environment: dev
    if: github.ref == 'refs/heads/dev'
    name: Inspect Infra Changes
    runs-on: ubuntu-latest
    steps:
      - uses: hashicorp/setup-terraform@v3
      - uses: actions/download-artifact@v4
        with:
          name: uploads
          path: downloads/
      - name: Check directory files
        run: |
          ls
          mkdir modules
          mv downloads/* modules/
          rm -rf modules/pre-prod-terraform.tf
          rm -rf modules/prod-terraform.tf
          mv modules/dev-terraform.tf modules/terraform.tf
          cd modules
          ls
          cd build
          ls
          cd ../..
      - name: Terraform plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
        run: |
          ls
          cd modules
          ls
          terraform init -lock=false
          terraform fmt
          terraform plan
  update_infra_changes:
    environment: dev
    name: Update Infra and App Changes
    runs-on: ubuntu-latest
    needs: inspect_changes
    if: github.ref == 'refs/heads/dev'
    steps:
      - uses: hashicorp/setup-terraform@v3
      - uses: actions/download-artifact@v4
        with:
          name: uploads
          path: downloads/
      - name: Check directory files
        run: |
          ls
          mkdir modules
          mv downloads/* modules/
          rm -rf modules/pre-prod-terraform.tf
          rm -rf modules/prod-terraform.tf
          mv modules/dev-terraform.tf modules/terraform.tf
          cd modules
          ls
          cd build
          ls
          cd ../..
      - name: Terraform plan and apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
        run: |
          cd modules
          terraform init -lock=false
          terraform fmt
          terraform plan
          terraform apply -auto-approve -lock=false
          terraform output cloudfront_discribution
          echo "Distro_ID=$(terraform output cloudfront_discribution)" >> "$GITHUB_ENV";
      - name: Invalidate cloudfront cache
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
          AWS_EC2_METADATA_DISABLED: true
        run: |
          aws cloudfront create-invalidation --distribution-id ${{  env.Distro_ID  }} --paths "/*"
          echo "Invalidation_ID=$(aws cloudfront list-invalidations --distribution-id ${{  env.Distro_ID  }} | jq -c '.InvalidationList.Items | .[] | select(.Status | contains("InProgress")) | .Id' | head -n 1)" >> "$GITHUB_ENV";
      - name: Wait for invalidation completion
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
          AWS_EC2_METADATA_DISABLED: true
        run: |
          aws cloudfront wait invalidation-completed --id ${{  env.Invalidation_ID  }} --distribution-id ${{  env.Distro_ID  }}
          echo "Deployment Completed"
  vulnerability_scan:
    name: Trivy Vulnerability Scan
    runs-on: ubuntu-latest
    needs: update_infra_changes
    if: github.ref == 'refs/heads/dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Run Trivy FS scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          ignore-unfixed: true
          vuln-type: 'os,library'
          exit-code: 1
