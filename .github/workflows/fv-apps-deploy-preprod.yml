name: Fv-Apps-Preprod
on:
  push:
    branches:
      - main
jobs:
  inspect_changes:
    environment: preprod
    if: github.ref == 'refs/heads/main'
    name: Inspect Infra Changes
    runs-on: ubuntu-latest
    steps:
      - uses: hashicorp/setup-terraform@v3
      - uses: actions/download-artifact@v4
        with:
          name: uploads
          path: downloads/
      - name: Check directory files
        run: |
          ls
          mkdir modules
          mv downloads/* modules/
          rm -rf modules/prod-terraform.tf
          rm -rf modules/dev-terraform.tf
          mv modules/pre-prod-terraform.tf modules/terraform.tf
          cd modules
          ls
          cd build
          ls
          cd ../..
      - name: Terraform plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
        run: |
          ls
          cd modules
          ls
          terraform init -lock=false
          terraform fmt
          terraform plan
  update_infra_changes:
    environment: preprod
    name: Update Infra and App Changes
    runs-on: ubuntu-latest
    needs: inspect_changes
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: hashicorp/setup-terraform@v3
      - uses: actions/download-artifact@v4
        with:
          name: uploads
          path: downloads/
      - name: Check directory files
        run: |
          ls
          mkdir modules
          mv downloads/* modules/
          rm -rf modules/prod-terraform.tf
          rm -rf modules/dev-terraform.tf
          mv modules/pre-prod-terraform.tf modules/terraform.tf
          cd modules
          ls
          cd build
          ls
          cd ../..
      - name: Terraform plan and apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
        run: |
          cd modules
          terraform init -lock=false
          terraform fmt
          terraform plan
          terraform apply -auto-approve -lock=false
          echo "Distro_ID=$(terraform output cloudfront_discribution)" >> "$GITHUB_ENV";
      - name: Invalidate cloudfront cache
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
          AWS_EC2_METADATA_DISABLED: true
        run: |
          aws cloudfront create-invalidation --distribution-id ${{  env.Distro_ID  }} --paths "/*"
          echo "Invalidation_ID=$(aws cloudfront list-invalidations --distribution-id ${{  env.Distro_ID  }} | jq -c '.InvalidationList.Items | .[] | select(.Status | contains("InProgress")) | .Id' | head -n 1)" >> "$GITHUB_ENV";
      - name: Wait for invalidation completion
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
          AWS_EC2_METADATA_DISABLED: true
        run: |
          aws cloudfront wait invalidation-completed --id ${{  env.Invalidation_ID  }} --distribution-id ${{  env.Distro_ID  }}
          echo "Deployment Completed"
